AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'sam-kyc

  Sample SAM Template for sam-kyc

  '
Globals:
  Function:
    Timeout: 20
    MemorySize: 128
Resources:
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: documentbucket-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  DocumentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DocumentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: s3:*
          Effect: Deny
          Resource:
          - Fn::Sub: arn:aws:s3:::${DocumentBucket}
          - Fn::Sub: arn:aws:s3:::${DocumentBucket}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport:
              - false
  ApplicationStatusTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ApplicationNotifications
      TopicName: ApplicationNotifications
      KmsMasterKeyId: alias/aws/sns
  CustomerDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: APP_UUID
        AttributeType: S
      KeySchema:
      - AttributeName: APP_UUID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      TableName: CustomerMetadataTable
  DDBWriteAutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: CustomerDDBTable
    Properties:
      MaxCapacity: 20
      MinCapacity: 2
      ResourceId: table/CustomerMetadataTable
      RoleARN:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  DDBReadAutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: CustomerDDBTable
    Properties:
      MaxCapacity: 20
      MinCapacity: 2
      ResourceId: table/CustomerMetadataTable
      RoleARN:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  TableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: DDBWriteAutoScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 2
        ScaleOutCooldown: 2
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  TableReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: DDBReadAutoScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 2
        ScaleOutCooldown: 2
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: LicenseQueue
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - LicenseDeadLetterQueue
          - Arn
        maxReceiveCount: 5
  LicenseDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: LicenseDeadLetterQueue
  UnzipLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UnzipLambdaFunction
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/UnzipLambdaRole
      CodeUri: UnzipLambdaFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      Tracing: Active
    Metadata:
      SamResourceId: UnzipLambdaFunction
  WriteToDynamoLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WriteToDynamoLambdaFunction
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/WriteToDynamoLambdaRole
      Environment:
        Variables:
          TABLE:
            Ref: CustomerDDBTable
      CodeUri: WriteToDynamoLambdaFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      Tracing: Active
    Metadata:
      SamResourceId: WriteToDynamoLambdaFunction
  CompareFacesLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CompareFacesLambdaFunction
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/CompareFacesLambdaRole
      Environment:
        Variables:
          TABLE:
            Ref: CustomerDDBTable
          TOPIC:
            Fn::GetAtt:
            - ApplicationStatusTopic
            - TopicArn
      CodeUri: CompareFacesLambdaFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      Tracing: Active
    Metadata:
      SamResourceId: CompareFacesLambdaFunction
  CompareDetailsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CompareDetailsLambdaFunction
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/CompareDetailsLambdaRole
      Environment:
        Variables:
          TABLE:
            Ref: CustomerDDBTable
          TOPIC:
            Fn::GetAtt:
            - ApplicationStatusTopic
            - TopicArn
      CodeUri: CompareDetailsLambdaFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      Tracing: Active
    Metadata:
      SamResourceId: CompareDetailsLambdaFunction
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
  ValidateLicenseLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ValidateLicenseLambdaFunction
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/ValidateLicenseLambdaRole
      CodeUri: ValidateLicenseLambdaFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      Events:
        License:
          Type: HttpApi
          Properties:
            Path: /license
            Method: post
            ApiId:
              Ref: HttpApi
    Metadata:
      SamResourceId: ValidateLicenseLambdaFunction
  SubmitLicenseLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SubmitLicenseLambdaFunction
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/SubmitLicenseLambdaRole
      CodeUri: SubmitLicenseLambdaFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          INVOKE_URL:
            Fn::Sub: https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/license
          TABLE:
            Ref: CustomerDDBTable
          TOPIC:
            Fn::GetAtt:
            - ApplicationStatusTopic
            - TopicArn
          QUEUE_URL:
            Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:LicenseQueue
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: true
            Queue:
              Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:LicenseQueue
            BatchSize: 1
    Metadata:
      SamResourceId: SubmitLicenseLambdaFunction
