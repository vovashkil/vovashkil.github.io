Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Items
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - KeyType: HASH
          AttributeName: id

      # Defines the table name
      TableName: Items

      # Defines the primary key attribute and its data type
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S

      # Configures the read and write throughput capacity for the table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ItemsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: items
      RestApiId: !Ref RestApi
  PostItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ItemsResource
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateItemFunction.Arn}/invocations
  CreateItemLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateItemFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  CreateItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateItem
      Runtime: python3.12
      Handler: index.create_item_handler
      Code:
        ZipFile: |
          import boto3
          import json

          def create_item_handler(event, context):
              # Connect to DynamoDB
              dynamodb = boto3.resource('dynamodb')
              # Specify the table name
              table_name = 'Items'
              table = dynamodb.Table(table_name)
              try:
                  # Get the item data from the request body
                  item_data = json.loads(event['body'])
                  # Put the item in the DynamoDB table
                  response = table.put_item(Item=item_data)
                  return {
                      'statusCode': 200,
                      'body': str(response)
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': str(e)
                  }
      Role: !ImportValue RestApiLambdaRoleARN
  GetItemsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ItemsResource
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadItemsFunction.Arn}/invocations
  ReadItemsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReadItemsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  ReadItemsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ReadItems
      Runtime: python3.12
      Handler: index.read_items_handler
      Code:
        ZipFile: |
          import boto3
          import json

          dynamodb = boto3.resource('dynamodb')

          def read_items_handler(event, context):
              try:
                  # Specify the table name
                  table_name = 'Items'
                  table = dynamodb.Table(table_name)

                  # Scan the table to get all items
                  response = table.scan()
                  items = response['Items']

                  # Fetch all items if there are more than 1 page of results
                  while 'LastEvaluatedKey' in response:
                      response = table.scan(ExclusiveStartKey=response['LastEvaluatedKey'])
                      items.extend(response['Items'])

                  # Return the items as a JSON response
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps(items)
                  }

              except Exception as e:
                  # Return an error response
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Role: !ImportValue RestApiLambdaRoleARN
  ItemsIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ItemsResource
      PathPart: '{id}'
      RestApiId: !Ref RestApi
  GetItemByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ItemsIdResource
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadItemByIdFunction.Arn}/invocations
  ReadItemByIdLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReadItemByIdFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  ReadItemByIdFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ReadItemById
      Runtime: python3.12
      Handler: index.read_item_by_id_handler
      Code:
        ZipFile: |
          import boto3
          import json

          dynamodb = boto3.resource('dynamodb')

          def read_item_by_id_handler(event, context):
              try:
                  # Specify the table name
                  table_name = 'Items'
                  table = dynamodb.Table(table_name)

                  # Get the item ID from the event
                  item_id = event['pathParameters']['id']

                  # Get the item from the DynamoDB table
                  response = table.get_item(Key={'id': item_id})
                  item = response.get('Item')

                  # If the item exists, return it
                  if item:
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Content-Type': 'application/json'
                          },
                          'body': json.dumps(item)
                      }
                  else:
                      # If the item doesn't exist, return a 404 error
                      return {
                          'statusCode': 404,
                          'headers': {
                              'Content-Type': 'application/json'
                          },
                          'body': json.dumps({'error': 'Item not found'})
                      }

              except Exception as e:
                  # Return an error response
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Role: !ImportValue RestApiLambdaRoleARN
  UpdateItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId: !Ref ItemsIdResource
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateItemFunction.Arn}/invocations
  UpdateItemLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateItemFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
  UpdateItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateItem
      Runtime: python3.12
      Handler: index.update_item_handler
      Code:
        ZipFile: |
          import boto3
          import json

          dynamodb = boto3.resource('dynamodb')

          def update_item_handler(event, context):
              try:
                  # Specify the table name
                  table_name = 'Items'
                  table = dynamodb.Table(table_name)

                  # Get the item ID and updated data from the event
                  item_id = event['pathParameters']['id']
                  updated_data = json.loads(event['body'])

                  # Prepare the AttributeUpdates dictionary
                  attribute_updates = {
                      key: {'Value': value, 'Action': 'PUT'}
                      for key, value in updated_data.items()
                  }

                  # Update the item in the DynamoDB table
                  response = table.update_item(
                      Key={'id': item_id},
                      AttributeUpdates=attribute_updates
                  )

                  # Return a success response
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps({
                          'message': 'Item updated successfully'
                      })
                  }

              except Exception as e:
                  # Return an error response
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Role: !ImportValue RestApiLambdaRoleARN